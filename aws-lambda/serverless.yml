# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-aws-graphql-mysql-husnain


# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

custom:
   #################################################################
   ##                        Cloud Deployment Config              ##
   #################################################################
   ## run sls deploy --stage prod to select the config.prod.yml
   ## run sls deploy --stage dev to select the config.dev.yml
   secrets: ${file(./Config/config.${opt:stage,self:provider.stage, 'dev'}.yml)}
   #################################################################
   ##                          Local Deployment                   ##
   #################################################################
   # secrets: ${file(./Config/config.offline.yml)}

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.secrets.REGION}
  vpc:
    securityGroupIds:
      - sg-0346c63b08bbbf4e9
    subnetIds:
      - subnet-dfb8c280
      - subnet-10f3c01e
      - subnet-42ebe20f
      - subnet-83532ae5
      - subnet-12058823
      - subnet-e5fcb8c4
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action: 
  #       - "ec2:CreateNetworkInterface"
  #       - "ec2:DescribeNetworkInterfaces"
  #       - "ec2:DeleteNetworkInterface"
  #     Resource: "*"
  environment:
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    #mysql
    MYSQL_DB_IDENTIFIER: ${self:custom.secrets.MYSQL_DB_IDENTIFIER}
    MYSQL_DB_NAME: ${self:custom.secrets.MYSQL_DB_NAME}
    MYSQL_DB_USERNAME: ${self:custom.secrets.MYSQL_DB_USERNAME}
    MYSQL_DB_PASSWORD: ${self:custom.secrets.MYSQL_DB_PASSWORD}
    MYSQL_DB_HOST: ${self:custom.secrets.MYSQL_DB_HOST}
    MYSQL_DB_PORT: ${self:custom.secrets.MYSQL_DB_PORT}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
 patterns:
   - '!node_modules/**'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  graphql:
    timeout: 30
    handler: handler.handler
    events:
      - http:
          path: /api
          method: post
          cors: true
      - http:
          path: /api
          method: get
          cors: true
    environment:      
      NODE_PATH: "./:/opt/node_modules"
    layers:
      - arn:aws:lambda:us-east-1:374231297286:layer:NodemodulesLayer:2         
  # playground:
  #   timeout: 30
  #   handler: handler.playground
  #   events:
  #     - http:
  #         path: /api # a must!
  #         method: get
  #         cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
   ServerlessBucket:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: repairdesk-husnain-copy
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-offline
